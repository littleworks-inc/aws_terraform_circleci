version: 2.1

executors:
  terraform:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
  tfsec:
    docker:
      - image: aquasec/tfsec-ci:latest

jobs:

  tfsec:
    executor: tfsec
    steps:
      - checkout
      - run: 
          name: tfsec
          command: |
            tfsec . -s

  terraform-plan:
    executor: terraform
    steps:
      - checkout
      - run:
          name: Set Environment and Terraform Plan
          command: |
            if [ "$CIRCLE_BRANCH" == "main" ]; then
              export ENV_TYPE="dev"
              terraform init -backend-config=dev_backend.hcl
              terraform plan -var-file=dev.tfvars
            elif [ "$CIRCLE_BRANCH" == "test" ]; then
              export ENV_TYPE="test"
              terraform init -backend-config=test_backend.hcl
              terraform plan -var-file=test.tfvars
            elif [ "$CIRCLE_BRANCH" == "master" ]; then
              export ENV_TYPE="prod"
              terraform init -backend-config=prod_backend.hcl
              terraform plan -var-file=prod.tfvars
            else
              echo "Unsupported branch"
              exit 1
            fi

  terraform-apply:
    executor: terraform
    steps:
      - checkout
      - run:
          name: Set Environment and Terraform Apply 
          command: |
            if [ "$CIRCLE_BRANCH" == "main" ]; then
              export ENV_TYPE="dev"
              terraform init -backend-config=dev_backend.hcl
              terraform apply -var-file=dev.tfvars
            elif [ "$CIRCLE_BRANCH" == "test" ]; then
              export ENV_TYPE="test"
              terraform init -backend-config=test_backend.hcl
              terraform apply -var-file=test.tfvars
            elif [ "$CIRCLE_BRANCH" == "master" ]; then
              export ENV_TYPE="prod"
              terraform init -backend-config=prod_backend.hcl
              terraform apply -var-file=prod.tfvars
            else
              echo "Unsupported branch"
              exit 1
            fi

workflows:
  build_approve_deploy:
    jobs:
      - tfsec
      - terraform-plan:
          requires:
            - tfsec 
      - hold:
          type: approval
          requires:
            - terraform-plan
      - terraform-apply:
          requires:
            - hold
